@page "/pdf-viewer/eSigning-pdf-forms"

@using System;
@using System.IO;
@using Syncfusion.Pdf; 
@using System.Threading.Tasks; 
@using Syncfusion.Pdf.Parsing; 
@using Syncfusion.Blazor
@using Syncfusion.Blazor.SfPdfViewer
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Popups
@using System.Text.Json;
@inject IJSRuntime JSRuntime
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@*End:Hidden*@
<SampleDescription>
    <p>This sample enables two different users to sign the document. The first user must fill out and sign their designated fields, which are visible only to them. Once the first user has completed their section, the second user can be selected to fill out and sign their own fields. After both users have signed, the document can be finalized.</p>
</SampleDescription>
<ActionDescription>
    <p>For more information about the Form Designer, refer to the <a target="_blank" href="https://help.syncfusion.com/document-processing/pdf/pdf-viewer/blazor/form-designer/overview">documentation</a>.</p>
</ActionDescription>
<div class="control-section">
    <div class="content-wrapper">
        <SfToolbar ID="e-pv-e-sign-toolbar_user_viewer" Width="100%" Height="48px" OverflowMode="OverflowMode.Popup" CssClass="template">
            <ToolbarItems>
                <!-- User Dropdown -->
                <ToolbarItem Type="ItemType.Input" Align="ItemAlign.Left">
                    <Template>
                        <div id="e-pv-e-sign-user-field" style="width: 200px;">
                            <div class="e-pv-e-sign-user-dropdown" style="width: 200px;">
                                <SfDropDownList TItem="EmployeeData" TValue="string"
                                ID="userMenu"
                                Width="210px"
                                PopupWidth="210px"
                                CssClass="template"
                                DataSource="@Data"
                                Enabled="@IsDropDownEnable"
                                @bind-Value="@dropdownValue">
                                    <DropDownListEvents TItem="EmployeeData" TValue="string" OnValueSelect="@OnUserSelected"></DropDownListEvents>
                                    <DropDownListFieldSettings Value="FirstName"></DropDownListFieldSettings>
                                    <DropDownListTemplates TItem="EmployeeData">
                                        <ItemTemplate Context="employee">
                                            <div style="display: flex;">
                                                <img class="e-pv-e-sign-empImage"
                                                style="@($"border: 1px solid {employee.Color}; margin: 10px 0px 0px 12px; border-radius: 50%;")"
                                                src="@employee.ImagePath"
                                                alt="employee" />
                                                <div style="display: flex; flex-direction: column;">
                                                    <div class="ename" style="font-size:14px; height:14px; font-weight:400;">@employee.FirstName</div>
                                                    <div class="mail" style="font-size:12px; margin-top: 2px;">@employee.Email</div>
                                                </div>
                                            </div>
                                        </ItemTemplate>
                                        <ValueTemplate Context="employee">
                                            <div style="display:flex;">
                                                <img class="value"
                                                style="@($"border: 1px solid {employee.Color}; margin: 5px 0px 0px 7px; border-radius: 50%;")"
                                                src="@employee.ImagePath"
                                                height="30"
                                                alt="employee" />
                                                <div style="margin-top: 3px;">
                                                    <div class="name" style="font-size:12px;margin-left: 11px; font-weight:400;">@employee.FirstName</div>
                                                    <div class="mail" style="font-size:10px;margin-top: 2px;margin-left: 10px;">@employee.Email</div>
                                                </div>
                                            </div>
                                        </ValueTemplate>
                                    </DropDownListTemplates>
                                </SfDropDownList>
                            </div>
                        </div>
                    </Template>
                </ToolbarItem>
                <!-- Finish Signing Button -->
                @if (SampleService.IsDevice)
                {
                    <ToolbarItem Align="ItemAlign.Right" Disabled="@IsFinishDisable" PrefixIcon="e-icons e-check" CssClass="e-check" OnClick="Download"></ToolbarItem>
                }
                else {
                    <ToolbarItem Align="ItemAlign.Right">
                        <Template>
                            <SfButton ID="e-pv-e-sign-finish-btn"
                            CssClass="e-outline"
                            Disabled="@IsFinishDisable"
                            OnClick="Download">
                                Finish Signing
                            </SfButton>
                        </Template>
                    </ToolbarItem>
                }
            </ToolbarItems>
        </SfToolbar>
        <div @attributes="viewerAttributes">
            <SfPdfViewer2 @ref="Viewer" DocumentPath="@DocumentPath"
            Height="100%"
            Width="100%"
            EnableToolbar="false"
            EnableAnnotationToolbar="false"
            EnableNavigationToolbar="false"
            IsDesignerMode=@IsDesignerMode ZoomMode="ZoomMode.FitToPage">
                <PdfViewerEvents DocumentLoaded="OnDocumentLoad" FormFieldPropertyChanged="OnPropertyChanged"></PdfViewerEvents>
                <PdfViewerToolbarSettings FormDesignerToolbarItems="null"></PdfViewerToolbarSettings>
            </SfPdfViewer2>
        </div>
        <div id="dialog-target">
            <SfDialog ID="dialog"
            Width="350px"
            MinHeight="50px"
            IsModal="true"
            ShowCloseIcon="false"
            @bind-Visible="IsStatus"
            CssClass="no-header-dialog"
            Target="#dialog-target">
                <DialogTemplates>
                    <Content>
                        <p>@DialogMessage</p>
                    </Content>
                </DialogTemplates>
                <DialogButtons>
                    <DialogButton Content="OK" IsPrimary="true" OnClick="@DialogButtonClick"></DialogButton>
                </DialogButtons>
            </SfDialog>
        </div>
    </div>
</div> 

@code {
    SfPdfViewer2? Viewer;
    private string fileName { get; set; } = "eSignfilling.pdf";
    private string DocumentPath { get; set; } = "https://cdn.syncfusion.com/content/pdf/eSign_filling.pdf";
    private bool IsDesignerMode { get; set; }
    private string CurrentUser { get; set; } = string.Empty;
    private bool IsFinishDisable { get; set; } = true;
    private bool IsStatus { get; set; }
    private string DialogMessage {get; set;} = string.Empty;
    private bool IsDropDownEnable { get; set; } = true;
    private string FinishedBackground {get; set;} = "#daeaf7ff";
    private string AnneBackground {get; set;} = "#eff7ef";
    private string AndrewBackground {get; set;} = "#ffefef";
    private bool IsPreventChange {get; set;}
    private bool IsUpdated {get; set;}
    private string dropdownValue = "Andrew Fuller";
    List<FormFieldInfo>? FormFieldCollections {get; set;}
    List<FormFieldInfo>? FirstUserCollections {get; set;}
    List<FormFieldInfo>? SecondUserCollections {get; set;}
    private Dictionary<string, object> viewerAttributes = new Dictionary<string, object>();
    protected override void OnInitialized()
    {  
        string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
        viewerAttributes["id"] = "pdfViewer";
@*Server:Block*@
#if !WASM
        foreach (EmployeeData employee in Data)
        {
            employee.ImagePath = $"images/pdfviewer/profile{employee.Eimg}.png";
        }
#endif
@*End:Server*@

@*WebAssembly:Block*@
#if WASM
        foreach (EmployeeData employee in Data)
        {
            employee.ImagePath = $"{fileDataPath}images/pdfviewer/profile{employee.Eimg}.png";

        }
#endif
@*End:WebAssembly*@

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (SampleService.IsDevice)
            {
    #if WASM
                StateHasChanged();
    #endif
            }
        }
        await base.OnAfterRenderAsync(firstRender).ConfigureAwait(true);
    }

    // Sample data for the dropdown
    private class EmployeeData
    {
        public string FirstName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Eimg { get; set; } = string.Empty;
        public string Color { get; set; } = string.Empty;
        public string? ImagePath {get; set;}
    }
    private static List<EmployeeData> Data = new List<EmployeeData>
    {
        new EmployeeData() { FirstName = "Andrew Fuller", Email = "andrew@mycompany.com", Eimg = "1", Color = "red"},
        new EmployeeData() { FirstName = "Anne Dodsworth", Email = "anne@mycompany.com", Eimg = "2", Color = "green" },
    };

    private async Task DialogButtonClick() {
        IsStatus = false;
    }

    private async Task Download()
    {
        if (Viewer != null)
        {
            try
            {
                // Get all form fields
                List<FormFieldInfo> forms = await Viewer.GetFormFieldsAsync();

                // Update background color for all fields
                foreach (FormFieldInfo form in forms)
                {
                    form.BackgroundColor = FinishedBackground;
                }

                // Update all fields at once
                await Viewer.UpdateFormFieldsAsync(forms);

                // Get document bytes
                byte[] byteArray = await Viewer.GetDocumentAsync();

                using var loadedDocument = new PdfLoadedDocument(byteArray);
                if (loadedDocument.Form != null)
                {
                    loadedDocument.FlattenAnnotations();
                    loadedDocument.Form.Flatten = true;
                }
                using var stream = new MemoryStream();
                loadedDocument.Save(stream);
                byte[] byteArrayValue = stream.ToArray();
                loadedDocument.Close(true);
                // Reload in viewer
                await Viewer.LoadAsync(byteArrayValue, null!);

                // Disable finish button & dropdown
                IsFinishDisable = true;
                IsDropDownEnable = false;

                // Download the PDF file from base64
                await JSRuntime.InvokeVoidAsync("downloadEsignFillingPdf", byteArrayValue, fileName);

            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error while downloading and loading the document: {ex.Message}");
            }
        }
    }
    private async Task OnDocumentLoad()
    {
        CurrentUser = "andrew@mycompany.com";
        await UpdateUserFormField();
    }

    private async Task OnUserSelected(SelectEventArgs<EmployeeData> args) {
        CurrentUser = args.ItemData.Email;
        await UpdateUserFormField();
        if (IsPreventChange) {
            args.Cancel = true;
        }
    }

    private async Task UpdateUserFormField() {
        FormFieldCollections = await Viewer!.GetFormFieldsAsync();
        if (FormFieldCollections == null)
            return;
        FirstUserCollections = GetFormFieldsByAuthor(FormFieldCollections, "andrew");
        SecondUserCollections = GetFormFieldsByAuthor(FormFieldCollections, "anne");
        if (CurrentUser == "andrew@mycompany.com")
        {
            foreach (FormFieldInfo field in SecondUserCollections)
            {
                bool hasValue = field switch
                {
                    TextBoxField textBox => !string.IsNullOrEmpty(textBox.Value),
                    PasswordField pwd => !string.IsNullOrEmpty(pwd.Value),
                    SignatureField sig => !string.IsNullOrEmpty(sig.Value),
                    _ => false
                };
                if (hasValue)
                {
                    field.BackgroundColor = FinishedBackground;
                    field.IsReadOnly = true;
                    if (!IsUpdated)
                    {
                        foreach (FormFieldInfo userField in FirstUserCollections)
                        {
                            userField.BackgroundColor = AndrewBackground;
                            userField.IsReadOnly = true;
                        }
                        IsUpdated = true;
                    }
                }
                else
                {
                    field.Visibility = VisibilityMode.Hidden;
                    if (!IsUpdated)
                    {
                        (string errorMessage, bool allFieldsValid) = ValidateFormFields(FirstUserCollections);
                        if (!allFieldsValid) {
                            foreach (FormFieldInfo userField in FirstUserCollections)
                            {
                                userField.BackgroundColor = AndrewBackground;
                            }
                            IsUpdated = true;
                        }
                    }
                }
            }
            await Viewer.UpdateFormFieldsAsync(FirstUserCollections);
            await Viewer.UpdateFormFieldsAsync(SecondUserCollections);
        }
        else
        {
            Validation(FirstUserCollections);
            if (!IsStatus)
            {
                foreach (FormFieldInfo userField in FirstUserCollections)
                {
                    userField.BackgroundColor = FinishedBackground;
                    userField.IsReadOnly = true;
                }
                foreach (FormFieldInfo otherField in SecondUserCollections)
                {
                    otherField.BackgroundColor = AnneBackground;
                    otherField.Visibility = VisibilityMode.Visible;
                    otherField.IsReadOnly = false;
                }
                await Viewer.UpdateFormFieldsAsync(FormFieldCollections);
            }
        }
    }

    private (string ErrorMessage, bool AllFieldsValid) ValidateFormFields(List<FormFieldInfo> forms) {
        string errorMessage = "Required Field(s): ";
        bool allFieldsValid = true;
        bool radioSelected = false;
        string radioGroupName = "";
        List<string> missingFields = new List<string>();
        if (forms != null)
        {
            foreach (FormFieldInfo field in forms)
            {
                if (!field.IsRequired)
                    continue;
                string name = field.Name;
                switch (field)
                {
                    case CheckBoxField cb when !cb.IsChecked:
                        missingFields.Add(name);
                        allFieldsValid = false;
                        break;
                    case RadioButtonField rb:
                        if (!radioSelected)
                        {
                            radioGroupName = name;
                            if (rb.IsSelected)
                                radioSelected = true;
                        }
                        break;
                    case TextBoxField tb when string.IsNullOrWhiteSpace(tb.Value):
                    case PasswordField pw when string.IsNullOrWhiteSpace(pw.Value):
                    case SignatureField sig when string.IsNullOrWhiteSpace(sig.Value):
                        missingFields.Add(name);
                        allFieldsValid = false;
                        break;
                    case DropDownField dd when dd.Items.Count == 0:
                    case ListBoxField lb when lb.Items.Count == 0:
                        missingFields.Add(name);
                        allFieldsValid = false;
                        break;
                }
            }
        }
        if (!radioSelected && !string.IsNullOrEmpty(radioGroupName))
        {
            missingFields.Add(radioGroupName);
            allFieldsValid = false;
        }
        if (missingFields.Any())
            errorMessage += string.Join(", ", missingFields);
        return (errorMessage, allFieldsValid);
    }

    private void Validation(List<FormFieldInfo> forms) {
        (string errorMessage, bool allFieldsValid) = ValidateFormFields(forms);
        if (!allFieldsValid)
        {
            IsStatus = true;
            DialogMessage = errorMessage;
            IsPreventChange = true;
        }
        else
        {
            IsStatus = false;
            IsPreventChange = false;
        }
    }
    private async void OnPropertyChanged(FormFieldPropertyChangedEventArgs args)
    {
        List<FormFieldInfo> forms = await Viewer!.GetFormFieldsAsync();
        (string errorMessage, bool allFieldsValid) = ValidateFormFields(forms);
        IsFinishDisable = !allFieldsValid;
        StateHasChanged();
    }

    public List<FormFieldInfo> GetFormFieldsByAuthor(List<FormFieldInfo> fields, string expectedAuthor) {
        return fields
        .Where(field =>
            {
                if (field.CustomData is JsonElement customDataElement &&
                    customDataElement.ValueKind == JsonValueKind.String)
                    {
                        string jsonString = customDataElement.GetString()!;
                        if (!string.IsNullOrWhiteSpace(jsonString))
                        {
                            try
                            {
                                using JsonDocument innerDoc = JsonDocument.Parse(jsonString);
                                if (innerDoc.RootElement.TryGetProperty("author", out var authorProp))
                                {
                                    return authorProp.GetString() == expectedAuthor;
                                }
                            }
                            catch
                            {
                                // Optionally handle JSON parse error
                            }
                        }
                    }
                    return false;
        })
        .ToList();
    }
 }

<style>

#e-pv-e-sign-user-field {
    color: #222933;
    font-family: Heebo, open sans, 'sans-serif', -apple-system,
      BlinkMacSystemFont;
    display: flex;
    position: relative;

}

#e-pv-e-sign-toolbar_user_viewer{
    z-index: 999;
    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15), 0px 1px 2px 0px rgba(0, 0, 0, 0.30);
}

#e-pv-e-sign-finish-btn{
    width: 115px !important;
    height: 28px;
    min-height: 0;
    padding: 0;
    font-size: 12px;
    flex-shrink: 0;
    border-radius: 16px;
    border: 1px solid;
    margin-right: 10px;
}

.e-pv-e-sign-user-dropdown .e-input-group:not(.e-float-icon-left):not(.e-float-input).e-input-focus::before,
.e-pv-e-sign-user-dropdown .e-input-group:not(.e-float-icon-left):not(.e-float-input).e-input-focus::after {
    width: 0px;
}

.e-pv-e-sign-empImage {
    width: 32px;
    height: 32px;
    margin-top: 7px;
    margin-left: 4px;
    border-radius: 50%;
}

.e-bigger .e-pv-e-sign-empImage {
    margin: 13px 0px 0px 12px !important;
}

.e-pv-e-sign-user-dropdown> :first-child {
    border: none !important;
    background-color: transparent !important;
}

.no-header-dialog .e-dlg-header-content {
    display: none !important;
}

#pdfViewer {
    height: 640px;
}
</style>
