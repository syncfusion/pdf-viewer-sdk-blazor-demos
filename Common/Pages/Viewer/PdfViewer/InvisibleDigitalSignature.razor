@page "/pdf-viewer/invisible-digital-signature"

@using System.IO
@inject IJSRuntime JSRuntime
@using Syncfusion.Pdf
@using Syncfusion.Pdf.Parsing
@using System.Security.Cryptography.X509Certificates
@using Syncfusion.Pdf.Security
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Inputs
@using System.Threading
@using Syncfusion.Blazor.SfPdfViewer
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@

<SampleDescription>
    <p>This sample showcases the process of digitally signing a PDF document from the code behind using Syncfusion's SfPdfViewer and PDF Library.</p>
</SampleDescription>

<ActionDescription>
    <p>This sample operates correctly when a signature field is present in the PDF document. If all signature fields are signed, the "Finish Signing" button becomes enabled. Clicking this button adds a digital signature certificate programmatically and reloads the digitally signed document into the viewer.</p>

    <br />

    <p>The below are the messages shown in the respective scenarios:</p>

    <br />

    <p>1. The document has been digitally signed, but it has been modified since it was signed, and at least one signature is invalid.</p>
    <ul>
        <li>This message appears if the digitally signed document is edited after reloading.</li>
    </ul>

    <p>2. The document has been digitally signed, and at least one signature has a problem.</p>
    <ul>
        <li>This message is shown if the digital signature is not registered on the machine and is not in the trusted list. Adding the certificate to the trusted list is necessary.</li>
    </ul>

    <p>3. The document has been digitally signed, and all the signatures are valid.</p>
    <ul>
        <li>This message indicates that the document is digitally signed without any issues.</li>
    </ul>

    @*WASM:Block*@
    @{
    #if (WASM)
    }
    <p>More information about the <strong>SfPdfViewer</strong> can be found in this
        <a target="_blank" href="https://help.syncfusion.com/document-processing/pdf/pdf-viewer/blazor/getting-started/web-assembly-application"
           aria-label="documentation section for viewing PDF files using PDF Viewer Component in the Blazor WASM app">documentation section</a>.
    </p>
    @{
    #endif
    }
    @*End:WASM*@

    @*Server:Block*@
    @{
    #if !(WASM)
    }
    <p>More information about the <strong>SfPdfViewer</strong> can be found in this
        <a target="_blank" href="https://help.syncfusion.com/document-processing/pdf/pdf-viewer/blazor/getting-started/server-side-application"
           aria-label="documentation section for viewing PDF files using PDF Viewer Component in the Blazor Server app">documentation section</a>.
    </p>
    @{
    #endif
    }
    @*End:Server*@
</ActionDescription>

<div style="display:none">
<SfUploader @ref="@FileUploader" ID="UploadFiles" ShowFileList="false" AllowedExtensions="@AllowedFileExtension">
    <UploaderEvents OnUploadStart="@FileUploadSelected" Created="createdHandler"></UploaderEvents>
    <UploaderAsyncSettings SaveUrl="https://blazor.syncfusion.com/services/development/api/FileUploader/Save" RemoveUrl="https://blazor.syncfusion.com/services/development/api/FileUploader/Remove"></UploaderAsyncSettings>
</SfUploader>
</div>
<SfToolbar>
    <ToolbarEvents Clicked="@ToolbarClick"></ToolbarEvents>
    <ToolbarItems>
        <ToolbarItem PrefixIcon="e-icons e-folder-open" TooltipText="Open file" Id="pdfviewer_open" Align="ItemAlign.Left" CssClass="e-pv-open-document-container">
        </ToolbarItem>
        <ToolbarItem Text="Complete Signing" Width="150px" Disabled="@IsCompleteSignVisible" Align="ItemAlign.Right" TooltipText="Finish Signing" id="pdfviewer_sign" CssClass="e-pv-button-container"></ToolbarItem>
        <ToolbarItem PrefixIcon="e-icons e-download" TooltipText="Download File" id="Download" Disabled="@IsDownloadIconVisible" Align=@ItemAlign.Right CssClass="e-pv-download-document-container"></ToolbarItem>
    </ToolbarItems>
</SfToolbar>

<div class="blazor">
    <div class="test-message">
        <SfMessage Severity="MessageSeverity.Success" ShowIcon="true" ShowCloseIcon="true" @bind-Visible="@IsSuccessVisible">@StatusMessage</SfMessage>
        <SfMessage Severity="MessageSeverity.Error" ShowIcon="true" ShowCloseIcon="true" @bind-Visible="@IsErrorVisible">@StatusMessage</SfMessage>
        <SfMessage Severity="MessageSeverity.Warning" ShowIcon="true" ShowCloseIcon="true" @bind-Visible="@IsWarningVisible">@StatusMessage</SfMessage>
    </div>
    <div class="toolbar-test" id="toolbar-box">

    <SfPdfViewer2 @ref="PdfViewerInstance" DocumentPath="@DocumentPath" Height="640px" Width="100%" ZoomMode="ZoomMode.FitToPage" EnableToolbar="false" EnableAnnotationToolbar="false" EnableNavigationToolbar="false" EnableFormDesigner="false">
    <PdfViewerEvents DocumentLoaded="ValidateSiganture" AddSignature="SignatureAdded"></PdfViewerEvents>
    </SfPdfViewer2>

    </div>
</div>

@code {
    @*Server:Block*@
    #if !(WASM)
    SfPdfViewer2? PdfViewerInstance { get; set; }
    private string DocumentPath { get; set; } = "wwwroot/data/pdfviewer/InvisibleDigitalSignature.pdf";
#endif
    @*End:Server*@

    @*WebAssembly:Block*@
    #if (WASM)
    private string DocumentPath { get; set; } = "wwwroot/data/pdfviewer/invisible-digital-signature.pdf";
    SfPdfViewer2? PdfViewerInstance;
#endif
    @*End:WebAssembly*@
    private SfUploader? FileUploader { get; set; }
    private string AllowedFileExtension { get; set; } = ".pdf";
    private string StatusMessage { get; set; } = string.Empty;
    private bool IsCompleteSignVisible { get; set; } = true;
    private bool IsDownloadIconVisible { get; set; } = true;
    private bool IsSuccessVisible { get; set; } = false;
    private bool IsErrorVisible { get; set; } = false;
    private bool IsWarningVisible { get; set; } = false;
    private string? DocumentInBase64 { get; set; }
    private Thread? BackgroundThread { get; set; }
    private bool HasDigitalSignature { get; set; } = false;

    public async Task createdHandler()
    {
       await JSRuntime.InvokeVoidAsync("created");
    }

    //Triggers while validating the signature in the document.
    public async Task ValidateSiganture()
    {
        byte[] contentPDF = null!;
        if (!String.IsNullOrEmpty(DocumentInBase64))
        {
            contentPDF = Convert.FromBase64String(DocumentInBase64.Replace("data:application/pdf;base64,", ""));
        }
        else
        {
            contentPDF = await PdfViewerInstance!.GetDocumentAsync();
        }
        //Loads a PDF document.
        PdfLoadedDocument document = new PdfLoadedDocument(contentPDF);
        PdfLoadedForm form = document.Form;
        if (form != null)
        {
            foreach (PdfLoadedField field in form.Fields)
            {
                if (field is PdfLoadedSignatureField)
                {
                    //Gets the first signature field of the PDF document.
                    PdfLoadedSignatureField? signatureField = field as PdfLoadedSignatureField;
                    if (signatureField!.IsSigned)
                    {
                        HasDigitalSignature = true;
                        //X509Certificate2Collection to check the signers identity using root certificates.
                        X509Certificate2Collection collection = new X509Certificate2Collection();
                         @*Server:Block*@
                         #if !(WASM)
                         //Create new X509Certificate2 with the root certificate.
                        X509Certificate2 certificate = new X509Certificate2("wwwroot/data/pdfviewer/localhost.pfx", "Syncfusion@123");
                         #endif
                         @*End:Server*@

                         @*WASM:Block*@
                         #if (WASM)
                         //Create new X509Certificate2 with the root certificate
                        X509Certificate2 certificate = new X509Certificate2("wwwroot/data/pdfviewer/localhost.pfx", "Syncfusion@123");
                         #endif
                         @*End:WASM*@
                         //Add the certificate to the collection.
                        collection.Add(certificate);
                        //Validate all signatures in loaded PDF document and get the list of validation result.
                        PdfSignatureValidationResult result = signatureField.ValidateSignature(collection);
                        //Checks whether the document is modified or not.
                        if (result.IsDocumentModified)
                        {
                            IsErrorVisible = true;
                            IsSuccessVisible = false;
                            IsWarningVisible = false;
                            IsDownloadIconVisible = false;
                            StatusMessage = "The document has been digitally signed, but it has been modified since it was signed and at least one signature is invalid .";
                        }
                        else
                        {
                            //Checks whether the signature is valid or not.
                            if (result.IsSignatureValid)
                            {
                                if (result.SignatureStatus.ToString() == "Unknown")
                                {
                                    IsErrorVisible = false;
                                    IsSuccessVisible = false;
                                    IsWarningVisible = true;
                                    StatusMessage = "The document has been digitally signed and at least one signature has problem";
                                }
                                else
                                {
                                    IsErrorVisible = false;
                                    IsSuccessVisible = true;
                                    IsWarningVisible = false;
                                    IsDownloadIconVisible = false;
                                    StatusMessage = "The document has been digitally signed and all the signatures are valid.";
                                    BackgroundThread = new Thread(() =>
                                    {
                                        Thread.Sleep(5000);
                                        IsSuccessVisible = false;
                                        InvokeAsync(StateHasChanged);
                                        BackgroundThread = null;
                                    });
                                    BackgroundThread.Start();
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    //This method will get invoked while clicking the toolbar items.
    public async Task ToolbarClick(ClickEventArgs args)
    {
        if (args.Item != null)
        {
            switch (args.Item.CssClass)
            {
                case "e-pv-button-container":
                    //Reloads the PDF document with digital signature.
                    var contentPDF = await PdfViewerInstance!.GetDocumentAsync();
                    PdfLoadedDocument loadedDocument = new PdfLoadedDocument(contentPDF);
                    // Flatten the form fields and annotations
                    loadedDocument.Form.Flatten = true;
                    loadedDocument.FlattenAnnotations();
                    MemoryStream str = new MemoryStream();
                    //Saves the document.
                    loadedDocument.Save(str);
                    loadedDocument.Close(true);
                    loadedDocument = new PdfLoadedDocument(str);
                    //Get the first page of the document.
                    PdfPageBase loadedPage = loadedDocument.Pages[0];
                    @*Server:Block*@
                    #if !(WASM)
                    //Create new X509Certificate2 with the root certificate.
                    X509Certificate2 certificate = new X509Certificate2("wwwroot/data/pdfviewer/localhost.pfx", "Syncfusion@123");
                    #endif
                    @*End:Server*@
                    @*WASM:Block*@
                    #if (WASM)
                    //Create new X509Certificate2 with the root certificate
                    X509Certificate2 certificate = new X509Certificate2("wwwroot/data/pdfviewer/localhost.pfx", "Syncfusion@123");
                    #endif
                    @*End:WASM*@
                    PdfCertificate pdfCertificate = new PdfCertificate(certificate);
                    //Creates a digital signature.
                    PdfSignature signature = new PdfSignature(loadedDocument, loadedPage, pdfCertificate, "Signature");
                    signature.Certificated = true;
                    MemoryStream stream = new MemoryStream();
                    //Saves the document.
                    loadedDocument.Save(stream);
                    byte[] docBytes = stream.ToArray();
                    DocumentInBase64 = "data:application/pdf;base64," + Convert.ToBase64String(docBytes);
                    // Loads the digitally signed document.
                    await PdfViewerInstance.LoadAsync(DocumentInBase64);
                    IsCompleteSignVisible = true;
                    IsDownloadIconVisible = false;
                    break;
                case "e-pv-download-document-container":
                    //Downloads the PDF document being loaded in the PDFViewer.
                    PdfViewerInstance!.DownloadFileName = "DigitallySignedDocument";
                    await PdfViewerInstance.DownloadAsync();
                    break;
            }
        }
    }

    //Triggers when changes occur in uploaded file list by selecting or dropping files.
    public async Task FileUploadSelected(UploadingEventArgs args)
    {
        if (args.FileData.Type == "pdf" && PdfViewerInstance != null && FileUploader != null)
        {
            IsCompleteSignVisible = true;
            IsDownloadIconVisible = true;
            IsErrorVisible = false;
            IsSuccessVisible = false;
            IsWarningVisible = false;
            HasDigitalSignature = false;
            DocumentInBase64 = args.FileData.RawFile.ToString()!;
            //Loads the PDF docuent from the given base64 string in the SfPdfViewer.
            await PdfViewerInstance.LoadAsync(DocumentInBase64, null!);
            await FileUploader.ClearAllAsync();
        }
    }

    //Triggers while adding the signature in signature field.
    public async Task SignatureAdded(AddSignatureEventArgs args)
    {
        List<FormField> field;
        //To retrieve the form fields in the loaded PDF Document.
        field = await PdfViewerInstance!.RetrieveFormFieldsAsync();
        int signatureFieldCount = 0;
        int signaturesCount = 0;
        for (var i = 0; i < field.Count; i++)
        {
            if (field[i].Type.ToString() == ("SignatureField"))
            {
                signatureFieldCount++;
            }
            if (field[i].Value != "" && field[i].Value != null && field[i].Type.ToString() == ("SignatureField"))
            {
                signaturesCount++;
            }
        }
        // Checks whether all the signature fields are signed or not.
        if (signatureFieldCount == signaturesCount)
        {
            //Checks whether the document has a digital signature or not.
            if (!HasDigitalSignature)
            {
                IsCompleteSignVisible = false;
            }
        }
    }

}
@*Hidden:Lines*@
<!--Style for custom toolbar-->
<style>
    .test-message .e-message.e-success {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 109;
        width: calc(100% - 18px);
    }

    .test-message .e-message.e-warning {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 109;
        width: calc(100% - 18px);
    }

    .test-message .e-message.e-error {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 109;
        width: calc(100% - 18px);
    }

    .test-message {
        position: relative;
    }

</style>
@*End:Hidden*@
