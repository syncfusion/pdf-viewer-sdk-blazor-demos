@page "/pdf-viewer/primary-toolbar-customization"

@inject IJSRuntime JSRuntime
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SfPdfViewer
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@*End:Hidden*@

<SampleDescription>
    <p>In this example, observe the modification of default toolbar item positions, along with the ability to show or hide specific toolbar items as required.</p>
</SampleDescription>
<ActionDescription>
    <p>Witness the capabilities of the PDF Viewer control API in action as it empowers users to execute various functions:</p>
    <ul>
        <li>Navigate to the Previous Page - <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.SfPdfViewer.PdfViewerBase.html#Syncfusion_Blazor_SfPdfViewer_PdfViewerBase_GoToPreviousPageAsync" aria-label="Navigate to the GoToPreviousPageAsync method reference for PdfViewerBase">"viewer.GoToPreviousPageAsync()"</a></li>
        <li>Navigate to the Next Page - <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.SfPdfViewer.PdfViewerBase.html#Syncfusion_Blazor_SfPdfViewer_PdfViewerBase_GoToNextPageAsync" aria-label="Navigate to the GoToNextPageAsync method reference for PdfViewerBase">"viewer.GoToNextPageAsync()"</a></li>
        <li>Jump to a Specific Page - <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.SfPdfViewer.PdfViewerBase.html#Syncfusion_Blazor_SfPdfViewer_PdfViewerBase_GoToPageAsync_System_Int32_" aria-label="Navigate to the GoToPageAsync method reference for PdfViewerBase">"viewer.GoToPageAsync(pageindex)"</a></li>
        <li>Print the Document - <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.SfPdfViewer.PdfViewerBase.html#Syncfusion_Blazor_SfPdfViewer_PdfViewerBase_PrintAsync" aria-label="Navigate to the PrintAsync method reference for PdfViewerBase">"viewer.PrintAsync()"</a></li>
        <li>Download the Document - <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.SfPdfViewer.PdfViewerBase.html#Syncfusion_Blazor_SfPdfViewer_PdfViewerBase_DownloadAsync" aria-label="Navigate to the DownloadAsync method reference for PdfViewerBase">"viewer.DownloadAsync()"</a></li>
        <li>Zoom In - <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.SfPdfViewer.PdfViewerBase.html#Syncfusion_Blazor_SfPdfViewer_PdfViewerBase_ZoomInAsync" aria-label="Navigate to the ZoomInAsync method reference for PdfViewerBase">"viewer.ZoomInAsync()"</a></li>
        <li>Zoom Out - <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.SfPdfViewer.PdfViewerBase.html#Syncfusion_Blazor_SfPdfViewer_PdfViewerBase_ZoomOutAsync" aria-label="Navigate to the ZoomOutAsync method reference for PdfViewerBase">"viewer.ZoomOutAsync()"</a></li>
    </ul>

    @*WASM:Block*@ 
    @{
#if (WASM)
    }
    <p>More information about the SfPdfViewer can be found in this <a target="_blank" href="https://help.syncfusion.com/document-processing/pdf/pdf-viewer/blazor/toolbar-customization" aria-label="documentation section for View PDF files using PDF Viewer Component in the Blazor WASM app">documentation section</a>.</p>
    @{
#endif 
    }
    @*End:WASM*@

    @*Server:Block*@ 
    @{
#if !(WASM)
    }
    <p>More information about the SfPdfViewer can be found in this <a target="_blank" href="https://help.syncfusion.com/document-processing/pdf/pdf-viewer/blazor/toolbar-customization" aria-label="documentation section for View PDF files using PDF Viewer Component in the Blazor Server app">documentation section</a>.</p>
    @{
#endif 
    }
    @*End:Server*@ 
</ActionDescription>

<div class="control-section col-lg-12">
    <div class="col-lg-9">
        <SfPdfViewer2 @ref="PdfViewerInstance" DocumentPath="@DocumentPath" Height="640px" ID="pdfviewer">
            <PdfViewerToolbarSettings CustomToolbarItems="@CustomToolbarItems" ToolbarItems="null" MobileToolbarItems="null" />
            <PdfViewerEvents DocumentLoaded="@DocumentLoaded" ToolbarClicked="@ClickAction" ZoomChanged="@ZoomChanged" PageChanged="@OnPageChanged"></PdfViewerEvents>
        </SfPdfViewer2>
    </div>
    <div class="col-lg-3">
        <div class='content property-section'>
            <div class="content-wrapper" style="margin-top:20px">
                <div class="heading-section">
                    <h5><b>Select Toolbar Items</b></h5>
                </div>
                <div class="control-styles">
                    <SfMultiSelect @ref="MultiSelectRef" @bind-Value="@SelectItems" TItem="string" TValue="string[]" Placeholder="Select toolbar items" Mode="@VisualMode.CheckBox" DataSource="@Items" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search toolbar items" PopupHeight="200px">
                    </SfMultiSelect>
                </div><br>
                <div class="evtbtn" style="padding-bottom: 10px">
                    <SfButton @onclick="Customize">Customize</SfButton>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private string DocumentPath { get; set; } = string.Empty;
    SfPdfViewer2? PdfViewerInstance { get; set; }
    SfMultiSelect<String[], string>? MultiSelectRef { get; set; }
    protected override void OnInitialized()
    {
        AddCustomToolbarItems();
        string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;

@*Server:Block*@
#if !WASM
        //Sets the PDF document path for initial loading.
        DocumentPath = "wwwroot/data/pdfviewer/hive-succinctly.pdf";
#endif
@*End:Server*@

@*WebAssembly:Block*@
#if WASM
        //Sets the PDF document path for initial loading.
        DocumentPath= fileDataPath + "data/pdfviewer/hive-succinctly.pdf";
#endif
@*End:WebAssembly*@

    }

    #region binded values
    private bool PreviousPageDisable { get; set; } = true;
    private bool NextPageDisable { get; set; } = true;
    private SfNumericTextBox<int>? CurrentPage { get; set; }
    private int TotalPages { get; set; }
    private int CurrentPageNumber { get; set; }
    private List<PdfToolbarItem> CustomToolbarItems { get; set; } = new List<PdfToolbarItem>();
    private bool OpenVisible { get; set; }= true;
    private bool PreVisible { get; set; }= true;
    private bool NextVisible { get; set; } = true;
    private bool ZoomInVisible { get; set; } = true;
    private bool PageNumberVisible { get; set; } = true;
    private bool ZoomOutVisible { get; set; } = true;
    private bool PrintVisible { get; set; } = true;
    private bool DownloadVisible { get; set; } = true;
    private bool AnnotationVisible { get; set; } = true;
    private bool SearchVisible { get; set; } = true;
    private bool ZoomInDisabled { get; set; } = false;
    private bool ZoomOutDisabled { get; set; }= false;
    string[] Items = new string[10] { "Open", "Previous Page", "Next Page", "Page Number", "Zoom In", "Zoom Out", "Edit Annotation", "Text Search", "Print", "Download" };
    string[] SelectItems = new string[] { "Open", "Previous Page", "Next Page", "Page Number", "Zoom In", "Zoom Out", "Edit Annotation", "Text Search", "Print", "Download" };
    #endregion

    // Method for Customize the List of the Selected Item to change the visibility of Toolbar Items
    public void Customize()
    {
        SelectItems = MultiSelectRef!.Value;
        ChangeVisibilty(SelectItems);
    }

    // Method to change the Visibility Boolean of the All Toolbar Items
    public async void ChangeVisibilty(string[] Items)
    {
        if (Items != null)
        {
            PreVisible = Items.Contains("Previous Page") ? true : false;
            PrintVisible = Items.Contains("Print") ? true : false;
            OpenVisible = Items.Contains("Open") ? true : false;
            NextVisible = Items.Contains("Next Page") ? true : false;
            DownloadVisible = Items.Contains("Download") ? true : false;
            PageNumberVisible = Items.Contains("Page Number") ? true : false;
            ZoomInVisible = Items.Contains("Zoom In") ? true : false;
            ZoomOutVisible = Items.Contains("Zoom Out") ? true : false;
            AnnotationVisible = Items.Contains("Edit Annotation") ? true : false;
            SearchVisible = Items.Contains("Text Search") ? true : false;
        }
        else
        {
            PreVisible = PrintVisible = OpenVisible = NextVisible = DownloadVisible = PageNumberVisible = ZoomInVisible = ZoomOutVisible = AnnotationVisible = SearchVisible = false;
        }
        if (!AnnotationVisible) {
            PdfViewerInstance!.ShowAnnotationToolbar(false);
        }
        if (!SearchVisible) {
            await JSRuntime.InvokeVoidAsync("hidePdfviewerSearchBox", "pdfviewer");
        }
    }

    // Method to render the Template for the CustomToolbarItems
     private RenderFragment GetTemplate(string templatename)
    {
        return __builder =>
        {
            if (templatename == "PreviousPage")
            {
                <ToolbarItem Text="Previous Page" Visible="@PreVisible" Disabled="@PreviousPageDisable" PrefixIcon="e-icons e-chevron-up" TooltipText="Previous Page" Id="previousPage" Align="ItemAlign.Center" CssClass="e-pv-custom-previous-page-navigation-container" TabIndex="@GetTabIndex(PreviousPageDisable)">
                </ToolbarItem>

            }
            else if(templatename == "NextPage")
            {
                <ToolbarItem Text="Next Page" Visible="@NextVisible" Disabled="@NextPageDisable" PrefixIcon="e-icons e-chevron-down" TooltipText="Next Page" id="nextPage" Align="ItemAlign.Center" CssClass="e-pv-custom-next-page-navigation-container" TabIndex="@GetTabIndex(NextPageDisable)">
                </ToolbarItem>
            }
            else if(templatename == "PageNumber")
            {
                <ToolbarItem Text="Page Number" Visible="@PageNumberVisible" Type="ItemType.Input" Align="ItemAlign.Center" Id="currentPageInput" TooltipText="Current Page Number" CssClass="e-pv-current-page-input-container" TabIndex="0">
                    <Template>
                        <SfNumericTextBox @ref="@CurrentPage"
                                        Max="@TotalPages"
                                        Min="0"
                                        Width="55px"
                                        TValue="int"
                                        Value="@CurrentPageNumber"
                                        ShowSpinButton=false CssClass="e-pv-current-page-box">
                            <NumericTextBoxEvents ValueChange="GoToPage" TValue="int"></NumericTextBoxEvents>
                        </SfNumericTextBox>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Visible="@PageNumberVisible" Align="ItemAlign.Center" Id="totalPage" CssClass="e-pv-total-page-container">
                    <Template>
                        <span class="e-pv-total-page"> of @TotalPages</span>
                    </Template>
                </ToolbarItem>
            }
            else if (templatename == "Print")
            {
                <ToolbarItem Text="Print File" Visible="@PrintVisible" PrefixIcon="e-icons e-print" TooltipText="Print File" id="print" Align="ItemAlign.Right" CssClass="e-pv-custom-print-document-container" TabIndex="0">
                </ToolbarItem>
            }
            else if (templatename == "Open")
            {
                <ToolbarItem Text="Open File" Visible="@OpenVisible" PrefixIcon="e-pv-open-document-icon e-pv-icon" TooltipText="Open File" Id="pdfviewer_open" Align="ItemAlign.Left" CssClass="e-pv-open-document-container e-pv-open-document" TabIndex="0">
                </ToolbarItem>
            }
            else if (templatename == "ZoomIn")
            {
                <ToolbarItem Text="Zoom In" Disabled="@ZoomInDisabled" Visible="@ZoomInVisible" PrefixIcon="e-icons e-pv-zoom-in-icon e-pv-icon" Id="zoomin" TooltipText="Zoom In" Align="ItemAlign.Center" CssClass="e-pv-custom-zoom-in-container" TabIndex="0">
                </ToolbarItem>
            }
            else if (templatename == "ZoomOut")
            {
                <ToolbarItem Text="Zoom Out" Disabled="@ZoomOutDisabled" Visible="@ZoomOutVisible" PrefixIcon="e-icons e-pv-zoom-out-icon e-pv-icon" Id="zoomout" TooltipText="Zoom Out" Align="ItemAlign.Center" CssClass="e-pv-custom-zoom-out-container" TabIndex="0">
                </ToolbarItem>
            }
            else if (templatename == "Download")
            {
                <ToolbarItem Text="Download" Visible="@DownloadVisible" PrefixIcon="e-icons e-download" TooltipText="Download File" Id="download" Align="ItemAlign.Right" CssClass="e-pv-custom-download-document-container" TabIndex="0">
                </ToolbarItem>
            }
            else if (templatename == "Annotation")
            {
                <ToolbarItem Visible="@AnnotationVisible" CssClass="e-pv-annotation-container" Text="Edit Annotation" PrefixIcon="e-pv-annotation-icon e-pv-icon" TooltipText="Edit Annotation" Id="annotation" Align="ItemAlign.Right" TabIndex="0">
                </ToolbarItem>
            }
            else if (templatename == "TextSearch")
            {
                <ToolbarItem Text="Text Search" Visible="@SearchVisible" PrefixIcon="e-pv-text-search-icon e-pv-icon" TooltipText="Text Search" Id="textsearch" Align="ItemAlign.Right" CssClass="e-pv-text-search-container" TabIndex="0">
                </ToolbarItem>
            }
        };
    }

    // Method for Get the Tab Index for the Toolbar Item
    private int GetTabIndex(bool Boolean)
    {
        return (Boolean == true) ? -1 : 0;
    }

    // Method to add items to the CustomToolbarItems list
    private void AddCustomToolbarItems()
    {
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 0, Template = GetTemplate("Open") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 1, Template = GetTemplate("PreviousPage") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 2, Template = GetTemplate("NextPage") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 3, Template = GetTemplate("PageNumber") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 4, Template = GetTemplate("ZoomIn") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 5, Template = GetTemplate("ZoomOut") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 6, Template = GetTemplate("Annotation") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 7, Template = GetTemplate("TextSearch") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 8, Template = GetTemplate("Print") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 9, Template = GetTemplate("Download") });
    }

    // ZoomChanged for the CustomToolbarItems
    private void ZoomChanged(ZoomChangeEventArgs args)
    {
        if (args.CurrentZoomValue <= 10)
        {
            ZoomOutDisabled = true;
        }
        else if (args.CurrentZoomValue >= 400)
        {
            ZoomInDisabled = true;
        }
        else
        {
            ZoomOutDisabled = false;
            ZoomInDisabled = false;
        }
    }

    // Clickevent for the CustomToolbarItems
    private async void ClickAction(ClickEventArgs Item)
    {
        if (PdfViewerInstance != null)
        {
            if (Item.Item.Id == "previousPage")
            {
                await PdfViewerInstance.GoToPreviousPageAsync();
                NextPageDisable = false;
            }
            else if (Item.Item.Id == "nextPage")
            {
                await PdfViewerInstance.GoToNextPageAsync();
                PreviousPageDisable = false;
            }
            else if (Item.Item.Id == "print")
            {
                await PdfViewerInstance.PrintAsync();
            }
            else if (Item.Item.Id == "zoomin")
            {
                await PdfViewerInstance.ZoomInAsync();
            }
            else if (Item.Item.Id == "zoomout")
            {
                await PdfViewerInstance.ZoomOutAsync();
            }
            else if (Item.Item.Id == "download")
            {
                await PdfViewerInstance.DownloadAsync();
            }
        }
    }

    //Triggers while loading document in to the PDFViewer.
    private void DocumentLoaded(LoadEventArgs args)
    {
        TotalPages = PdfViewerInstance!.PageCount;
        CurrentPageNumber = PdfViewerInstance.CurrentPageNumber;
        NextPageDisable = false;
        if (TotalPages == 1)
        {
            PreviousPageDisable = true;
            NextPageDisable = true;
        }
        @*Hidden:Lines*@
@*WebAssembly:Block*@
#if WASM
       PdfViewerInstance.UpdateViewerContainerAsync();
#endif
@*End:WebAssembly*@
       @*End:Hidden*@
    }

    //Triggers when there is change in the current page number.
    private void OnPageChanged(PageChangeEventArgs args)
    {
        CurrentPageNumber = (int)args.CurrentPageNumber;
        if (args.CurrentPageNumber == TotalPages)
        {
            NextPageDisable = true;
            PreviousPageDisable = false;
        }
        if (args.CurrentPageNumber < TotalPages && args.CurrentPageNumber != 1)
        {
            PreviousPageDisable = false;
            NextPageDisable = false;
        }
        if (args.CurrentPageNumber == 1)
        {
            NextPageDisable = false;
            PreviousPageDisable = true;
        }
        PdfViewerInstance!.UpdateViewerContainerAsync();
    }

    //Triggers when the value of the numeric textbox changes.
    private async void GoToPage(Syncfusion.Blazor.Inputs.ChangeEventArgs<int> args)
    {
        int currentValue = args.Value;
        if (args.Event != null)
        {
            var changeEventArgs = args.Event as Microsoft.AspNetCore.Components.ChangeEventArgs;
            if (changeEventArgs != null && changeEventArgs.Value != null)
            {
                currentValue = int.Parse(changeEventArgs.Value.ToString()!);
            }
        }
        if (currentValue == args.Value && args.Value != 0)
        {
            CurrentPageNumber = args.Value;
            //Navigate to given page number in loaded document of the PDFViewer2.
            await PdfViewerInstance!.GoToPageAsync(args.Value);
        }
        else
        {
            CurrentPageNumber = PdfViewerInstance!.CurrentPageNumber;
        }
    }
}

@*Hidden:Lines*@
<!--Style for custom toolbar-->
<style>
    .div{
        padding-top: 10px;
    }

    .e-pv-total-page-container {
        margin-left: 6px;
    }
    .fluent2 .e-toolbar .e-toolbar-item .e-tbar-btn.e-tbtn-txt .e-icons.e-btn-icon,
    .e-bigger.fluent2 .e-toolbar .e-toolbar-item .e-tbar-btn.e-tbtn-txt .e-icons.e-btn-icon {
        padding: 0px !important;
    }

    .highcontrast .e-toolbar .e-toolbar-item .e-tbar-btn.e-tbtn-txt .e-icons.e-btn-icon,
    .e-bigger.highcontrast .e-toolbar .e-toolbar-item .e-tbar-btn.e-tbtn-txt .e-icons.e-btn-icon {
        padding: 0px !important;
    }
    .highcontrast .e-toolbar .e-toolbar-item .e-tbar-btn.e-tbtn-txt {
        height: 50px;
    }

</style>
@*End:Hidden*@