@page "/smart-pdf-viewer/smartfill"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.SfPdfViewer
@using Syncfusion.Blazor.Navigations;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Cards;
@using Syncfusion.Blazor.Layouts;
@using Syncfusion.Pdf.Parsing;
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@*End:Hidden*@

<SampleDescription>
    <p>
        This sample illustrates how the Syncfusion Blazor Smart PDF Viewer can automatically fill form fields with user data with the help of AI.
    </p>
    <p>
        Explore our <strong>Smart PDF Viewer demos</strong> with limited AI token usage directly in your browser. To dive deeper and try out these features locally using your own API key, check out our
        <a href="https://github.com/SyncfusionExamples/blazor-smart-pdf-viewer-examples" target="_blank" aria-label="Navigate to the Syncfusion Smart PDF Viewer Samples GitHub repository">
            <strong>Syncfusion Smart PDF Viewer samples</strong>
        </a> on GitHub.
    </p>
</SampleDescription>

<ActionDescription>
    <p>
        The AI processes the input information to populate the relevant fields in the PDF form, improving efficiency and reducing manual entry errors. However, users may need to review and adjust the filled fields as needed.
    </p>
    <p>More information about using <strong>Smart PDF Viewer</strong> can be found in this <a target='_blank' href='https://help.syncfusion.com/document-processing/pdf/smart-pdf-viewer/blazor/smart-fill' aria-label="Syncfusion documentation page about the Smart Fill feature in Smart PDF Viewer">documentation section</a>.</p>
</ActionDescription>

@*Hidden:Lines*@
<AINotification></AINotification>
@*End:Hidden*@

@*Hidden:Lines*@
<AIToastNotification></AIToastNotification>

@*End:Hidden*@
<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="control-section">
            <div style="position:relative">
                <div class="parent-container">
                    <div class="sample-content">
                        @if(isDeviceMode)
                        {
                        @if (!isMobileDevice)
                        {
                            <!-- Desktop View -->
                            <div class="left-content" style="width:@(isMobileDevice ? "100%" : "75%");">
                                <Pdfviewer></Pdfviewer>
                            </div>
                            <div class="right-content">
                                <div class="smart-fill-container">
                                    <div class="header">
                                        <h6>Sample content to copy</h6>
                                    </div>
                                    @foreach (UserData userDetail in userDetails)
                                    {
                                        <SfCard CssClass="box" @onmouseover="() => isPopupVisible[userDetail.ID] = true" @onmouseout="() => isPopupVisible[userDetail.ID] = false">
                                            @if (isPopupVisible[userDetail.ID])
                                            {
                                                <SfButton OnClick="() => CopyToClipboard(userDetail.ID, userDetail.Value)" IconCss="@copyIcons[userDetail.ID]" CssClass="copy-icon">
                                                </SfButton>
                                            }
                                            <CardContent Content="@userDetail.Value" />
                                        </SfCard>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <!-- Mobile View -->
                            <SfSplitter Height="96vh" Width="100%" Orientation="Syncfusion.Blazor.Layouts.Orientation.Vertical">
                                <SplitterEvents OnResizeStop="OnResizeStop"></SplitterEvents>
                                <SplitterPanes>
                                    <SplitterPane CssClass="pdfPane">
                                        <ContentTemplate>
                                            <Pdfviewer IsMobileDevice="true" RefreshContainer="@refreshContainer" ViewerHeight="@viewerHeight"></Pdfviewer>
                                        </ContentTemplate>
                                    </SplitterPane>
                                    <SplitterPane @ref="splitterPane" @bind-Size="@size" @bind-Max="@maxValue" @bind-Min="@minValue" CssClass="mobile-smart-fill-container">
                                        <ContentTemplate>
                                            <div class="mobile-header">
                                                <SfButton OnClick="ChangeIcon" @bind-IconCss="@chevronIcon" CssClass="splitter-icon"></SfButton>
                                                <h6>Sample content to copy</h6>
                                            </div>
                                            @foreach (UserData userDetail in userDetails)
                                            {
                                                <SfCard CssClass="box" @onmouseover="() => isPopupVisible[userDetail.ID] = true" @onmouseout="() => isPopupVisible[userDetail.ID] = false">
                                                    @if (isPopupVisible[userDetail.ID])
                                                    {
                                                        <SfButton OnClick="() => CopyToClipboard(userDetail.ID, userDetail.Value)" IconCss="@copyIcons[userDetail.ID]" CssClass="copy-icon">
                                                        </SfButton>
                                                    }
                                                    <CardContent Content="@userDetail.Value" />
                                                </SfCard>

                                            }
                                        </ContentTemplate>
                                    </SplitterPane>
                                </SplitterPanes>
                            </SfSplitter>
                        }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code{
    #region Properties
    private SplitterPane? splitterPane;
    private bool[] isPopupVisible = new bool[3];
    private bool isMobileDevice = false;
    private bool refreshContainer = false;
    private string viewerHeight = "inherit";
    private string chevronIcon = "e-icons e-chevron-up";
    private string maxValue = "50%";
    private string minValue = "25%";
    private string size = "25%";
    private string[] copyIcons = { "e-icons e-copy", "e-icons e-copy", "e-icons e-copy" };
    private Boolean isDeviceMode;
    public class UserData
    {
        public int ID { get; set; }
        public string Value { get; set; } = string.Empty;
    }
    private List<UserData> userDetails = new List<UserData>()
{
    new UserData(){ ID = 0, Value = "Hi, this is Alice. You can contact me at alice456@gmail.com. I am female, born on July 15, 1998. I want to unsubscribe from a newspaper and learn courses, specifically a Cloud Computing course. I am from Texas." },
    new UserData(){ ID = 1, Value = "Hello, I'm John Paul born on March 12, 2001. I am not looking to subscribe to any newspapers or enroll in courses. I'm male and you can reach me at johnpaul2209@gmail.com. I'm from Alaska and I'm interested in a Web Development course." },
    new UserData(){ ID = 2, Value = "Hello, my name is Peter Parker, born on Sept 22, 2002. I'm interested in subscribing to a newspaper and learning through courses. I'm male, and you can contact me at peterparker03@gmail.com. I'm from New York, and I'm interested in a Digital Marketing course."}
};
    #endregion
    private async Task CopyToClipboard(int id, string textToCopy)
    {
        copyIcons[id] = "e-icons e-check";
        // write the content to clipboard
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", textToCopy);
        await Task.Delay(5000);
        copyIcons[id] = "e-icons e-copy";
    }
    private void OnResizeStop(ResizingEventArgs args)
    {
        // refresh the pdf Viewer
        refreshContainer = true;
    }
    private void ChangeIcon()
    {
        if (splitterPane != null)
        {
            if (double.Parse(splitterPane.Size.TrimEnd('%')) <= 30)
            {
                // change the size to max value
                size = "50%";
                // refresh the pdf Viewer and change the icon
                refreshContainer = true;
                chevronIcon = "e-icons e-chevron-down";
            }
            else if (double.Parse(splitterPane.Size.TrimEnd('%')) >= 45)
            {
                // change the size to min value
                size = "25%";
                refreshContainer = true;
                chevronIcon = "e-icons e-chevron-up";
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isMobileDevice = await JsRuntime.InvokeAsync<bool>("isMobileDevice", false);
            isDeviceMode = true;
            StateHasChanged();
        }
        if (splitterPane != null)
        {
            if (double.Parse(splitterPane.Size.TrimEnd('%')) >= 45)
            {
                chevronIcon = "e-icons e-chevron-down";
            }
            else if (double.Parse(splitterPane.Size.TrimEnd('%')) <= 30)
            {
                chevronIcon = "e-icons e-chevron-up";
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    public void Dispose()
    {
        if(splitterPane is IDisposable disposable)
        {
            disposable.Dispose();
        }
        userDetails?.Clear();
        copyIcons = new string[0];
    }
}
<style>
    .parent-container {
        width: 100%;
        display: flex;
        flex-direction: column;
        font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    }
    .left-content {
        height: calc(100% - 31px);
        padding-right: 12px
    }
    .right-content {
        height: 100%;
        width: 25%;
        position: absolute;
        top: 0;
        right: 0;
        overflow: auto;
        border: 1px solid lightgray;
    }
    .e-bigger .right-content {
        height: 100% !important;
    }
    .smart-fill-container {
        padding: 12px;
    }
    .mobile-smart-fill-container {
        padding: 1% 3% 3%;
    }
    .e-toolbar {
        border-width: 1px !important
    }
    .header {
        height: 43px;
        padding: 1.5%;
        overflow: auto;
        border-bottom: 1px solid lightgray
    }
    .header h6 {
        margin: 0 !important
    }
    .mobile-header {
        padding: 0 3% 3%;
        height: 48px;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        border-bottom: 1px solid lightgray
    }
    .mobile-header h6 {
        margin: 0;
        padding-right: 10px;
    }
    .smart-fill-btn {
        position: absolute; 
        right: 12px;
        height: 32px;
        width: 156px;
        padding: 0 !important;
        line-height: unset !important;
        font-size: 14px !important
    }
    .spinner-container {
        height: 100vh;
        width: 74.2%;
        position: absolute;
        top: 0;
        left: 0;
        background-color: black;
        opacity: 0.3;
        z-index: 999999
    }
    .copy-icon {
        position: absolute;
        top: 9px;
        right: 9px;
        border: none !important;
        background-color: transparent !important;
        padding: 0 !important;
        font-size: 12px !important;
        box-shadow: unset !important
    }
    .splitter-icon {
        margin: 0;
        border: none !important;
        padding: 0 !important;
        background-color: transparent !important;
    }
    .box {
        min-height: 110px !important;
        margin: 20px 0;
        padding: 12px 3% 0 0;
    }
    /*for mobiles*/
    @@media only screen and (max-width: 430px) {
        .e-toolbar .e-toolbar-item .e-tbar-btn .e-tbar-btn-text {
            display: none
        }
        .smart-fill-btn {
            width: 32px !important;
            height: 32px !important;
        }
        .spinner-container {
            right: 0;
            top: 0;
            height: 100vh;
            width: 100%
        }
    }
</style>